From 5e5bc1fe422e2ac374cea96fef23b33abe3e4980 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Miroslav=20S=CC=8Cafa=CC=81r=CC=8C?=
 <miroslav.safar@znojmo.cz>
Date: Sun, 24 Dec 2023 01:14:12 +0100
Subject: [PATCH] Add uuid rewrite into entity spawn event for 1.20.2+


diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/AbstractPacketHandler.java b/protocol/src/main/java/net/md_5/bungee/protocol/AbstractPacketHandler.java
index 43842b58..7660e562 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/AbstractPacketHandler.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/AbstractPacketHandler.java
@@ -10,6 +10,7 @@ import net.md_5.bungee.protocol.packet.ClientStatus;
 import net.md_5.bungee.protocol.packet.Commands;
 import net.md_5.bungee.protocol.packet.EncryptionRequest;
 import net.md_5.bungee.protocol.packet.EncryptionResponse;
+import net.md_5.bungee.protocol.packet.EntitySpawn;
 import net.md_5.bungee.protocol.packet.EntityStatus;
 import net.md_5.bungee.protocol.packet.FinishConfiguration;
 import net.md_5.bungee.protocol.packet.GameState;
@@ -263,5 +264,9 @@ public abstract class AbstractPacketHandler
     public void handle(PlayerSession playerSession) throws Exception
     {
     }
+
+    public void handle(EntitySpawn entitySpawn) throws Exception
+    {
+    }
     // QPlay end
 }
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/Protocol.java b/protocol/src/main/java/net/md_5/bungee/protocol/Protocol.java
index 21e156bf..55cfa23a 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/Protocol.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/Protocol.java
@@ -8,7 +8,9 @@ import gnu.trove.map.TIntObjectMap;
 import gnu.trove.map.TObjectIntMap;
 import gnu.trove.map.hash.TIntObjectHashMap;
 import gnu.trove.map.hash.TObjectIntHashMap;
+
 import java.util.function.Supplier;
+
 import lombok.Data;
 import lombok.Getter;
 import net.md_5.bungee.protocol.packet.BossBar;
@@ -20,6 +22,7 @@ import net.md_5.bungee.protocol.packet.ClientSettings;
 import net.md_5.bungee.protocol.packet.Commands;
 import net.md_5.bungee.protocol.packet.EncryptionRequest;
 import net.md_5.bungee.protocol.packet.EncryptionResponse;
+import net.md_5.bungee.protocol.packet.EntitySpawn;
 import net.md_5.bungee.protocol.packet.EntityStatus;
 import net.md_5.bungee.protocol.packet.FinishConfiguration;
 import net.md_5.bungee.protocol.packet.GameState;
@@ -58,68 +61,69 @@ import net.md_5.bungee.protocol.packet.Title;
 import net.md_5.bungee.protocol.packet.TitleTimes;
 import net.md_5.bungee.protocol.packet.ViewDistance;
 
-public enum Protocol
-{
+public enum Protocol {
 
     // Undef
-    HANDSHAKE
-    {
+    HANDSHAKE {
 
         {
             TO_SERVER.registerPacket(
                     Handshake.class,
                     Handshake::new,
-                    map( ProtocolConstants.MINECRAFT_1_8, 0x00 )
+                    map(ProtocolConstants.MINECRAFT_1_8, 0x00)
             );
         }
     },
     // 0
-    GAME
-    {
+    GAME {
 
         {
             TO_CLIENT.registerPacket(
                     KeepAlive.class,
                     KeepAlive::new,
-                    map( ProtocolConstants.MINECRAFT_1_8, 0x00 ),
-                    map( ProtocolConstants.MINECRAFT_1_9, 0x1F ),
-                    map( ProtocolConstants.MINECRAFT_1_13, 0x21 ),
-                    map( ProtocolConstants.MINECRAFT_1_14, 0x20 ),
-                    map( ProtocolConstants.MINECRAFT_1_15, 0x21 ),
-                    map( ProtocolConstants.MINECRAFT_1_16, 0x20 ),
-                    map( ProtocolConstants.MINECRAFT_1_16_2, 0x1F ),
-                    map( ProtocolConstants.MINECRAFT_1_17, 0x21 ),
-                    map( ProtocolConstants.MINECRAFT_1_19, 0x1E ),
-                    map( ProtocolConstants.MINECRAFT_1_19_1, 0x20 ),
-                    map( ProtocolConstants.MINECRAFT_1_19_3, 0x1F ),
-                    map( ProtocolConstants.MINECRAFT_1_19_4, 0x23 ),
-                    map( ProtocolConstants.MINECRAFT_1_20_2, 0x24 )
+                    map(ProtocolConstants.MINECRAFT_1_8, 0x00),
+                    map(ProtocolConstants.MINECRAFT_1_9, 0x1F),
+                    map(ProtocolConstants.MINECRAFT_1_13, 0x21),
+                    map(ProtocolConstants.MINECRAFT_1_14, 0x20),
+                    map(ProtocolConstants.MINECRAFT_1_15, 0x21),
+                    map(ProtocolConstants.MINECRAFT_1_16, 0x20),
+                    map(ProtocolConstants.MINECRAFT_1_16_2, 0x1F),
+                    map(ProtocolConstants.MINECRAFT_1_17, 0x21),
+                    map(ProtocolConstants.MINECRAFT_1_19, 0x1E),
+                    map(ProtocolConstants.MINECRAFT_1_19_1, 0x20),
+                    map(ProtocolConstants.MINECRAFT_1_19_3, 0x1F),
+                    map(ProtocolConstants.MINECRAFT_1_19_4, 0x23),
+                    map(ProtocolConstants.MINECRAFT_1_20_2, 0x24)
             );
             TO_CLIENT.registerPacket(
                     Login.class,
                     Login::new,
-                    map( ProtocolConstants.MINECRAFT_1_8, 0x01 ),
-                    map( ProtocolConstants.MINECRAFT_1_9, 0x23 ),
-                    map( ProtocolConstants.MINECRAFT_1_13, 0x25 ),
-                    map( ProtocolConstants.MINECRAFT_1_15, 0x26 ),
-                    map( ProtocolConstants.MINECRAFT_1_16, 0x25 ),
-                    map( ProtocolConstants.MINECRAFT_1_16_2, 0x24 ),
-                    map( ProtocolConstants.MINECRAFT_1_17, 0x26 ),
-                    map( ProtocolConstants.MINECRAFT_1_19, 0x23 ),
-                    map( ProtocolConstants.MINECRAFT_1_19_1, 0x25 ),
-                    map( ProtocolConstants.MINECRAFT_1_19_3, 0x24 ),
-                    map( ProtocolConstants.MINECRAFT_1_19_4, 0x28 ),
-                    map( ProtocolConstants.MINECRAFT_1_20_2, 0x29 )
-            );
-            TO_CLIENT.registerPacket( Chat.class,
+                    map(ProtocolConstants.MINECRAFT_1_8, 0x01),
+                    map(ProtocolConstants.MINECRAFT_1_9, 0x23),
+                    map(ProtocolConstants.MINECRAFT_1_13, 0x25),
+                    map(ProtocolConstants.MINECRAFT_1_15, 0x26),
+                    map(ProtocolConstants.MINECRAFT_1_16, 0x25),
+                    map(ProtocolConstants.MINECRAFT_1_16_2, 0x24),
+                    map(ProtocolConstants.MINECRAFT_1_17, 0x26),
+                    map(ProtocolConstants.MINECRAFT_1_19, 0x23),
+                    map(ProtocolConstants.MINECRAFT_1_19_1, 0x25),
+                    map(ProtocolConstants.MINECRAFT_1_19_3, 0x24),
+                    map(ProtocolConstants.MINECRAFT_1_19_4, 0x28),
+                    map(ProtocolConstants.MINECRAFT_1_20_2, 0x29)
+            );
+            TO_CLIENT.registerPacket(Chat.class,
                     Chat::new,
-                    map( ProtocolConstants.MINECRAFT_1_8, 0x02 ),
-                    map( ProtocolConstants.MINECRAFT_1_9, 0x0F ),
-                    map( ProtocolConstants.MINECRAFT_1_13, 0x0E ),
-                    map( ProtocolConstants.MINECRAFT_1_15, 0x0F ),
-                    map( ProtocolConstants.MINECRAFT_1_16, 0x0E ),
-                    map( ProtocolConstants.MINECRAFT_1_17, 0x0F ),
-                    map( ProtocolConstants.MINECRAFT_1_19, -1 )
+                    map(ProtocolConstants.MINECRAFT_1_8, 0x02),
+                    map(ProtocolConstants.MINECRAFT_1_9, 0x0F),
+                    map(ProtocolConstants.MINECRAFT_1_13, 0x0E),
+                    map(ProtocolConstants.MINECRAFT_1_15, 0x0F),
+                    map(ProtocolConstants.MINECRAFT_1_16, 0x0E),
+                    map(ProtocolConstants.MINECRAFT_1_17, 0x0F),
+                    map(ProtocolConstants.MINECRAFT_1_19, -1)
+            );
+            TO_CLIENT.registerPacket(EntitySpawn.class,
+                    EntitySpawn::new,
+                    map(ProtocolConstants.MINECRAFT_1_20_2, 0x01)
             );
             TO_CLIENT.registerPacket(
                     Respawn.class,
@@ -144,44 +148,44 @@ public enum Protocol
             TO_CLIENT.registerPacket(
                     BossBar.class,
                     BossBar::new,
-                    map( ProtocolConstants.MINECRAFT_1_9, 0x0C ),
-                    map( ProtocolConstants.MINECRAFT_1_15, 0x0D ),
-                    map( ProtocolConstants.MINECRAFT_1_16, 0x0C ),
-                    map( ProtocolConstants.MINECRAFT_1_17, 0x0D ),
-                    map( ProtocolConstants.MINECRAFT_1_19, 0x0A ),
-                    map( ProtocolConstants.MINECRAFT_1_19_4, 0x0B ),
-                    map( ProtocolConstants.MINECRAFT_1_20_2, 0x0A )
+                    map(ProtocolConstants.MINECRAFT_1_9, 0x0C),
+                    map(ProtocolConstants.MINECRAFT_1_15, 0x0D),
+                    map(ProtocolConstants.MINECRAFT_1_16, 0x0C),
+                    map(ProtocolConstants.MINECRAFT_1_17, 0x0D),
+                    map(ProtocolConstants.MINECRAFT_1_19, 0x0A),
+                    map(ProtocolConstants.MINECRAFT_1_19_4, 0x0B),
+                    map(ProtocolConstants.MINECRAFT_1_20_2, 0x0A)
             );
             TO_CLIENT.registerPacket(
                     PlayerListItem.class, // PlayerInfo
                     PlayerListItem::new,
-                    map( ProtocolConstants.MINECRAFT_1_8, 0x38 ),
-                    map( ProtocolConstants.MINECRAFT_1_9, 0x2D ),
-                    map( ProtocolConstants.MINECRAFT_1_12_1, 0x2E ),
-                    map( ProtocolConstants.MINECRAFT_1_13, 0x30 ),
-                    map( ProtocolConstants.MINECRAFT_1_14, 0x33 ),
-                    map( ProtocolConstants.MINECRAFT_1_15, 0x34 ),
-                    map( ProtocolConstants.MINECRAFT_1_16, 0x33 ),
-                    map( ProtocolConstants.MINECRAFT_1_16_2, 0x32 ),
-                    map( ProtocolConstants.MINECRAFT_1_17, 0x36 ),
-                    map( ProtocolConstants.MINECRAFT_1_19, 0x34 ),
-                    map( ProtocolConstants.MINECRAFT_1_19_1, 0x37 ),
-                    map( ProtocolConstants.MINECRAFT_1_19_3, -1 )
+                    map(ProtocolConstants.MINECRAFT_1_8, 0x38),
+                    map(ProtocolConstants.MINECRAFT_1_9, 0x2D),
+                    map(ProtocolConstants.MINECRAFT_1_12_1, 0x2E),
+                    map(ProtocolConstants.MINECRAFT_1_13, 0x30),
+                    map(ProtocolConstants.MINECRAFT_1_14, 0x33),
+                    map(ProtocolConstants.MINECRAFT_1_15, 0x34),
+                    map(ProtocolConstants.MINECRAFT_1_16, 0x33),
+                    map(ProtocolConstants.MINECRAFT_1_16_2, 0x32),
+                    map(ProtocolConstants.MINECRAFT_1_17, 0x36),
+                    map(ProtocolConstants.MINECRAFT_1_19, 0x34),
+                    map(ProtocolConstants.MINECRAFT_1_19_1, 0x37),
+                    map(ProtocolConstants.MINECRAFT_1_19_3, -1)
             );
             TO_CLIENT.registerPacket(
                     TabCompleteResponse.class,
                     TabCompleteResponse::new,
-                    map( ProtocolConstants.MINECRAFT_1_8, 0x3A ),
-                    map( ProtocolConstants.MINECRAFT_1_9, 0x0E ),
-                    map( ProtocolConstants.MINECRAFT_1_13, 0x10 ),
-                    map( ProtocolConstants.MINECRAFT_1_15, 0x11 ),
-                    map( ProtocolConstants.MINECRAFT_1_16, 0x10 ),
-                    map( ProtocolConstants.MINECRAFT_1_16_2, 0x0F ),
-                    map( ProtocolConstants.MINECRAFT_1_17, 0x11 ),
-                    map( ProtocolConstants.MINECRAFT_1_19, 0x0E ),
-                    map( ProtocolConstants.MINECRAFT_1_19_3, 0x0D ),
-                    map( ProtocolConstants.MINECRAFT_1_19_4, 0x0F ),
-                    map( ProtocolConstants.MINECRAFT_1_20_2, 0x10 )
+                    map(ProtocolConstants.MINECRAFT_1_8, 0x3A),
+                    map(ProtocolConstants.MINECRAFT_1_9, 0x0E),
+                    map(ProtocolConstants.MINECRAFT_1_13, 0x10),
+                    map(ProtocolConstants.MINECRAFT_1_15, 0x11),
+                    map(ProtocolConstants.MINECRAFT_1_16, 0x10),
+                    map(ProtocolConstants.MINECRAFT_1_16_2, 0x0F),
+                    map(ProtocolConstants.MINECRAFT_1_17, 0x11),
+                    map(ProtocolConstants.MINECRAFT_1_19, 0x0E),
+                    map(ProtocolConstants.MINECRAFT_1_19_3, 0x0D),
+                    map(ProtocolConstants.MINECRAFT_1_19_4, 0x0F),
+                    map(ProtocolConstants.MINECRAFT_1_20_2, 0x10)
             );
             TO_CLIENT.registerPacket(
                     ScoreboardObjective.class,
@@ -259,36 +263,36 @@ public enum Protocol
             TO_CLIENT.registerPacket(
                     PluginMessage.class,
                     PluginMessage::new,
-                    map( ProtocolConstants.MINECRAFT_1_8, 0x3F ),
-                    map( ProtocolConstants.MINECRAFT_1_9, 0x18 ),
-                    map( ProtocolConstants.MINECRAFT_1_13, 0x19 ),
-                    map( ProtocolConstants.MINECRAFT_1_14, 0x18 ),
-                    map( ProtocolConstants.MINECRAFT_1_15, 0x19 ),
-                    map( ProtocolConstants.MINECRAFT_1_16, 0x18 ),
-                    map( ProtocolConstants.MINECRAFT_1_16_2, 0x17 ),
-                    map( ProtocolConstants.MINECRAFT_1_17, 0x18 ),
-                    map( ProtocolConstants.MINECRAFT_1_19, 0x15 ),
-                    map( ProtocolConstants.MINECRAFT_1_19_1, 0x16 ),
-                    map( ProtocolConstants.MINECRAFT_1_19_3, 0x15 ),
-                    map( ProtocolConstants.MINECRAFT_1_19_4, 0x17 ),
-                    map( ProtocolConstants.MINECRAFT_1_20_2, 0x18 )
+                    map(ProtocolConstants.MINECRAFT_1_8, 0x3F),
+                    map(ProtocolConstants.MINECRAFT_1_9, 0x18),
+                    map(ProtocolConstants.MINECRAFT_1_13, 0x19),
+                    map(ProtocolConstants.MINECRAFT_1_14, 0x18),
+                    map(ProtocolConstants.MINECRAFT_1_15, 0x19),
+                    map(ProtocolConstants.MINECRAFT_1_16, 0x18),
+                    map(ProtocolConstants.MINECRAFT_1_16_2, 0x17),
+                    map(ProtocolConstants.MINECRAFT_1_17, 0x18),
+                    map(ProtocolConstants.MINECRAFT_1_19, 0x15),
+                    map(ProtocolConstants.MINECRAFT_1_19_1, 0x16),
+                    map(ProtocolConstants.MINECRAFT_1_19_3, 0x15),
+                    map(ProtocolConstants.MINECRAFT_1_19_4, 0x17),
+                    map(ProtocolConstants.MINECRAFT_1_20_2, 0x18)
             );
             TO_CLIENT.registerPacket(
                     Kick.class,
                     Kick::new,
-                    map( ProtocolConstants.MINECRAFT_1_8, 0x40 ),
-                    map( ProtocolConstants.MINECRAFT_1_9, 0x1A ),
-                    map( ProtocolConstants.MINECRAFT_1_13, 0x1B ),
-                    map( ProtocolConstants.MINECRAFT_1_14, 0x1A ),
-                    map( ProtocolConstants.MINECRAFT_1_15, 0x1B ),
-                    map( ProtocolConstants.MINECRAFT_1_16, 0x1A ),
-                    map( ProtocolConstants.MINECRAFT_1_16_2, 0x19 ),
-                    map( ProtocolConstants.MINECRAFT_1_17, 0x1A ),
-                    map( ProtocolConstants.MINECRAFT_1_19, 0x17 ),
-                    map( ProtocolConstants.MINECRAFT_1_19_1, 0x19 ),
-                    map( ProtocolConstants.MINECRAFT_1_19_3, 0x17 ),
-                    map( ProtocolConstants.MINECRAFT_1_19_4, 0x1A ),
-                    map( ProtocolConstants.MINECRAFT_1_20_2, 0x1B )
+                    map(ProtocolConstants.MINECRAFT_1_8, 0x40),
+                    map(ProtocolConstants.MINECRAFT_1_9, 0x1A),
+                    map(ProtocolConstants.MINECRAFT_1_13, 0x1B),
+                    map(ProtocolConstants.MINECRAFT_1_14, 0x1A),
+                    map(ProtocolConstants.MINECRAFT_1_15, 0x1B),
+                    map(ProtocolConstants.MINECRAFT_1_16, 0x1A),
+                    map(ProtocolConstants.MINECRAFT_1_16_2, 0x19),
+                    map(ProtocolConstants.MINECRAFT_1_17, 0x1A),
+                    map(ProtocolConstants.MINECRAFT_1_19, 0x17),
+                    map(ProtocolConstants.MINECRAFT_1_19_1, 0x19),
+                    map(ProtocolConstants.MINECRAFT_1_19_3, 0x17),
+                    map(ProtocolConstants.MINECRAFT_1_19_4, 0x1A),
+                    map(ProtocolConstants.MINECRAFT_1_20_2, 0x1B)
             );
             TO_CLIENT.registerPacket(
                     Title.class,
@@ -311,11 +315,11 @@ public enum Protocol
             TO_CLIENT.registerPacket(
                     ClearTitles.class,
                     ClearTitles::new,
-                    map( ProtocolConstants.MINECRAFT_1_17, 0x10 ),
-                    map( ProtocolConstants.MINECRAFT_1_19, 0x0D ),
-                    map( ProtocolConstants.MINECRAFT_1_19_3, 0x0C ),
-                    map( ProtocolConstants.MINECRAFT_1_19_4, 0x0E ),
-                    map( ProtocolConstants.MINECRAFT_1_20_2, 0x0F )
+                    map(ProtocolConstants.MINECRAFT_1_17, 0x10),
+                    map(ProtocolConstants.MINECRAFT_1_19, 0x0D),
+                    map(ProtocolConstants.MINECRAFT_1_19_3, 0x0C),
+                    map(ProtocolConstants.MINECRAFT_1_19_4, 0x0E),
+                    map(ProtocolConstants.MINECRAFT_1_20_2, 0x0F)
             );
             TO_CLIENT.registerPacket(
                     Subtitle.class,
@@ -373,45 +377,45 @@ public enum Protocol
             TO_CLIENT.registerPacket(
                     EntityStatus.class,
                     EntityStatus::new,
-                    map( ProtocolConstants.MINECRAFT_1_8, 0x1A ),
-                    map( ProtocolConstants.MINECRAFT_1_9, 0x1B ),
-                    map( ProtocolConstants.MINECRAFT_1_13, 0x1C ),
-                    map( ProtocolConstants.MINECRAFT_1_14, 0x1B ),
-                    map( ProtocolConstants.MINECRAFT_1_15, 0x1C ),
-                    map( ProtocolConstants.MINECRAFT_1_16, 0x1B ),
-                    map( ProtocolConstants.MINECRAFT_1_16_2, 0x1A ),
-                    map( ProtocolConstants.MINECRAFT_1_17, 0x1B ),
-                    map( ProtocolConstants.MINECRAFT_1_19, 0x18 ),
-                    map( ProtocolConstants.MINECRAFT_1_19_1, 0x1A ),
-                    map( ProtocolConstants.MINECRAFT_1_19_3, 0x19 ),
-                    map( ProtocolConstants.MINECRAFT_1_19_4, 0x1C ),
-                    map( ProtocolConstants.MINECRAFT_1_20_2, 0x1D )
+                    map(ProtocolConstants.MINECRAFT_1_8, 0x1A),
+                    map(ProtocolConstants.MINECRAFT_1_9, 0x1B),
+                    map(ProtocolConstants.MINECRAFT_1_13, 0x1C),
+                    map(ProtocolConstants.MINECRAFT_1_14, 0x1B),
+                    map(ProtocolConstants.MINECRAFT_1_15, 0x1C),
+                    map(ProtocolConstants.MINECRAFT_1_16, 0x1B),
+                    map(ProtocolConstants.MINECRAFT_1_16_2, 0x1A),
+                    map(ProtocolConstants.MINECRAFT_1_17, 0x1B),
+                    map(ProtocolConstants.MINECRAFT_1_19, 0x18),
+                    map(ProtocolConstants.MINECRAFT_1_19_1, 0x1A),
+                    map(ProtocolConstants.MINECRAFT_1_19_3, 0x19),
+                    map(ProtocolConstants.MINECRAFT_1_19_4, 0x1C),
+                    map(ProtocolConstants.MINECRAFT_1_20_2, 0x1D)
             );
             TO_CLIENT.registerPacket(
                     Commands.class,
                     Commands::new,
-                    map( ProtocolConstants.MINECRAFT_1_13, 0x11 ),
-                    map( ProtocolConstants.MINECRAFT_1_15, 0x12 ),
-                    map( ProtocolConstants.MINECRAFT_1_16, 0x11 ),
-                    map( ProtocolConstants.MINECRAFT_1_16_2, 0x10 ),
-                    map( ProtocolConstants.MINECRAFT_1_17, 0x12 ),
-                    map( ProtocolConstants.MINECRAFT_1_19, 0x0F ),
-                    map( ProtocolConstants.MINECRAFT_1_19_3, 0x0E ),
-                    map( ProtocolConstants.MINECRAFT_1_19_4, 0x10 ),
-                    map( ProtocolConstants.MINECRAFT_1_20_2, 0x11 )
+                    map(ProtocolConstants.MINECRAFT_1_13, 0x11),
+                    map(ProtocolConstants.MINECRAFT_1_15, 0x12),
+                    map(ProtocolConstants.MINECRAFT_1_16, 0x11),
+                    map(ProtocolConstants.MINECRAFT_1_16_2, 0x10),
+                    map(ProtocolConstants.MINECRAFT_1_17, 0x12),
+                    map(ProtocolConstants.MINECRAFT_1_19, 0x0F),
+                    map(ProtocolConstants.MINECRAFT_1_19_3, 0x0E),
+                    map(ProtocolConstants.MINECRAFT_1_19_4, 0x10),
+                    map(ProtocolConstants.MINECRAFT_1_20_2, 0x11)
             );
             TO_CLIENT.registerPacket(
                     GameState.class,
                     GameState::new,
-                    map( ProtocolConstants.MINECRAFT_1_15, 0x1F ),
-                    map( ProtocolConstants.MINECRAFT_1_16, 0x1E ),
-                    map( ProtocolConstants.MINECRAFT_1_16_2, 0x1D ),
-                    map( ProtocolConstants.MINECRAFT_1_17, 0x1E ),
-                    map( ProtocolConstants.MINECRAFT_1_19, 0x1B ),
-                    map( ProtocolConstants.MINECRAFT_1_19_1, 0x1D ),
-                    map( ProtocolConstants.MINECRAFT_1_19_3, 0x1C ),
-                    map( ProtocolConstants.MINECRAFT_1_19_4, 0x1F ),
-                    map( ProtocolConstants.MINECRAFT_1_20_2, 0x20 )
+                    map(ProtocolConstants.MINECRAFT_1_15, 0x1F),
+                    map(ProtocolConstants.MINECRAFT_1_16, 0x1E),
+                    map(ProtocolConstants.MINECRAFT_1_16_2, 0x1D),
+                    map(ProtocolConstants.MINECRAFT_1_17, 0x1E),
+                    map(ProtocolConstants.MINECRAFT_1_19, 0x1B),
+                    map(ProtocolConstants.MINECRAFT_1_19_1, 0x1D),
+                    map(ProtocolConstants.MINECRAFT_1_19_3, 0x1C),
+                    map(ProtocolConstants.MINECRAFT_1_19_4, 0x1F),
+                    map(ProtocolConstants.MINECRAFT_1_20_2, 0x20)
             );
             TO_CLIENT.registerPacket(
                     ViewDistance.class,
@@ -440,16 +444,16 @@ public enum Protocol
             TO_CLIENT.registerPacket(
                     PlayerListItemRemove.class,
                     PlayerListItemRemove::new,
-                    map( ProtocolConstants.MINECRAFT_1_19_3, 0x35 ),
-                    map( ProtocolConstants.MINECRAFT_1_19_4, 0x39 ),
-                    map( ProtocolConstants.MINECRAFT_1_20_2, 0x3B )
+                    map(ProtocolConstants.MINECRAFT_1_19_3, 0x35),
+                    map(ProtocolConstants.MINECRAFT_1_19_4, 0x39),
+                    map(ProtocolConstants.MINECRAFT_1_20_2, 0x3B)
             );
             TO_CLIENT.registerPacket(
                     PlayerListItemUpdate.class,
                     PlayerListItemUpdate::new,
-                    map( ProtocolConstants.MINECRAFT_1_19_3, 0x36 ),
-                    map( ProtocolConstants.MINECRAFT_1_19_4, 0x3A ),
-                    map( ProtocolConstants.MINECRAFT_1_20_2, 0x3C )
+                    map(ProtocolConstants.MINECRAFT_1_19_3, 0x36),
+                    map(ProtocolConstants.MINECRAFT_1_19_4, 0x3A),
+                    map(ProtocolConstants.MINECRAFT_1_20_2, 0x3C)
             );
             TO_CLIENT.registerPacket(
                     StartConfiguration.class,
@@ -478,24 +482,24 @@ public enum Protocol
             );
             TO_SERVER.registerPacket( Chat.class,
                     Chat::new,
-                    map( ProtocolConstants.MINECRAFT_1_8, 0x01 ),
-                    map( ProtocolConstants.MINECRAFT_1_9, 0x02 ),
-                    map( ProtocolConstants.MINECRAFT_1_12, 0x03 ),
-                    map( ProtocolConstants.MINECRAFT_1_12_1, 0x02 ),
-                    map( ProtocolConstants.MINECRAFT_1_14, 0x03 ),
-                    map( ProtocolConstants.MINECRAFT_1_19, -1 )
+                    map(ProtocolConstants.MINECRAFT_1_8, 0x01),
+                    map(ProtocolConstants.MINECRAFT_1_9, 0x02),
+                    map(ProtocolConstants.MINECRAFT_1_12, 0x03),
+                    map(ProtocolConstants.MINECRAFT_1_12_1, 0x02),
+                    map(ProtocolConstants.MINECRAFT_1_14, 0x03),
+                    map(ProtocolConstants.MINECRAFT_1_19, -1)
             );
             TO_SERVER.registerPacket(
                     ClientCommand.class,
                     ClientCommand::new,
-                    map( ProtocolConstants.MINECRAFT_1_19, 0x03 ),
-                    map( ProtocolConstants.MINECRAFT_1_19_1, 0x04 )
+                    map(ProtocolConstants.MINECRAFT_1_19, 0x03),
+                    map(ProtocolConstants.MINECRAFT_1_19_1, 0x04)
             );
             TO_SERVER.registerPacket(
                     ClientChat.class,
                     ClientChat::new,
-                    map( ProtocolConstants.MINECRAFT_1_19, 0x04 ),
-                    map( ProtocolConstants.MINECRAFT_1_19_1, 0x05 )
+                    map(ProtocolConstants.MINECRAFT_1_19, 0x04),
+                    map(ProtocolConstants.MINECRAFT_1_19_1, 0x05)
             );
 
             // Waterfall start
@@ -510,39 +514,39 @@ public enum Protocol
             TO_SERVER.registerPacket(
                     PlayerSession.class,
                     PlayerSession::new,
-                    map( ProtocolConstants.MINECRAFT_1_19_3, 0x20 ),
-                    map( ProtocolConstants.MINECRAFT_1_19_4, 0x06 )
+                    map(ProtocolConstants.MINECRAFT_1_19_3, 0x20),
+                    map(ProtocolConstants.MINECRAFT_1_19_4, 0x06)
             );
             // QPlay end
 
             TO_SERVER.registerPacket(
                     TabCompleteRequest.class,
                     TabCompleteRequest::new,
-                    map( ProtocolConstants.MINECRAFT_1_8, 0x14 ),
-                    map( ProtocolConstants.MINECRAFT_1_9, 0x01 ),
-                    map( ProtocolConstants.MINECRAFT_1_12, 0x02 ),
-                    map( ProtocolConstants.MINECRAFT_1_12_1, 0x01 ),
-                    map( ProtocolConstants.MINECRAFT_1_13, 0x05 ),
-                    map( ProtocolConstants.MINECRAFT_1_14, 0x06 ),
-                    map( ProtocolConstants.MINECRAFT_1_19, 0x08 ),
-                    map( ProtocolConstants.MINECRAFT_1_19_1, 0x09 ),
-                    map( ProtocolConstants.MINECRAFT_1_19_3, 0x08 ),
-                    map( ProtocolConstants.MINECRAFT_1_19_4, 0x09 ),
-                    map( ProtocolConstants.MINECRAFT_1_20_2, 0x0A )
+                    map(ProtocolConstants.MINECRAFT_1_8, 0x14),
+                    map(ProtocolConstants.MINECRAFT_1_9, 0x01),
+                    map(ProtocolConstants.MINECRAFT_1_12, 0x02),
+                    map(ProtocolConstants.MINECRAFT_1_12_1, 0x01),
+                    map(ProtocolConstants.MINECRAFT_1_13, 0x05),
+                    map(ProtocolConstants.MINECRAFT_1_14, 0x06),
+                    map(ProtocolConstants.MINECRAFT_1_19, 0x08),
+                    map(ProtocolConstants.MINECRAFT_1_19_1, 0x09),
+                    map(ProtocolConstants.MINECRAFT_1_19_3, 0x08),
+                    map(ProtocolConstants.MINECRAFT_1_19_4, 0x09),
+                    map(ProtocolConstants.MINECRAFT_1_20_2, 0x0A)
             );
             TO_SERVER.registerPacket(
                     ClientSettings.class,
                     ClientSettings::new,
-                    map( ProtocolConstants.MINECRAFT_1_8, 0x15 ),
-                    map( ProtocolConstants.MINECRAFT_1_9, 0x04 ),
-                    map( ProtocolConstants.MINECRAFT_1_12, 0x05 ),
-                    map( ProtocolConstants.MINECRAFT_1_12_1, 0x04 ),
-                    map( ProtocolConstants.MINECRAFT_1_14, 0x05 ),
-                    map( ProtocolConstants.MINECRAFT_1_19, 0x07 ),
-                    map( ProtocolConstants.MINECRAFT_1_19_1, 0x08 ),
-                    map( ProtocolConstants.MINECRAFT_1_19_3, 0x07 ),
-                    map( ProtocolConstants.MINECRAFT_1_19_4, 0x08 ),
-                    map( ProtocolConstants.MINECRAFT_1_20_2, 0x09 )
+                    map(ProtocolConstants.MINECRAFT_1_8, 0x15),
+                    map(ProtocolConstants.MINECRAFT_1_9, 0x04),
+                    map(ProtocolConstants.MINECRAFT_1_12, 0x05),
+                    map(ProtocolConstants.MINECRAFT_1_12_1, 0x04),
+                    map(ProtocolConstants.MINECRAFT_1_14, 0x05),
+                    map(ProtocolConstants.MINECRAFT_1_19, 0x07),
+                    map(ProtocolConstants.MINECRAFT_1_19_1, 0x08),
+                    map(ProtocolConstants.MINECRAFT_1_19_3, 0x07),
+                    map(ProtocolConstants.MINECRAFT_1_19_4, 0x08),
+                    map(ProtocolConstants.MINECRAFT_1_20_2, 0x09)
             );
             TO_SERVER.registerPacket(
                     PluginMessage.class,
@@ -564,205 +568,190 @@ public enum Protocol
             TO_SERVER.registerPacket(
                     StartConfiguration.class,
                     StartConfiguration::new,
-                    map( ProtocolConstants.MINECRAFT_1_20_2, 0x0B )
+                    map(ProtocolConstants.MINECRAFT_1_20_2, 0x0B)
             );
         }
     },
     // 1
-    STATUS
-    {
+    STATUS {
 
         {
             TO_CLIENT.registerPacket(
                     StatusResponse.class,
                     StatusResponse::new,
-                    map( ProtocolConstants.MINECRAFT_1_8, 0x00 )
+                    map(ProtocolConstants.MINECRAFT_1_8, 0x00)
             );
             TO_CLIENT.registerPacket(
                     PingPacket.class,
                     PingPacket::new,
-                    map( ProtocolConstants.MINECRAFT_1_8, 0x01 )
+                    map(ProtocolConstants.MINECRAFT_1_8, 0x01)
             );
 
             TO_SERVER.registerPacket(
                     StatusRequest.class,
                     StatusRequest::new,
-                    map( ProtocolConstants.MINECRAFT_1_8, 0x00 )
+                    map(ProtocolConstants.MINECRAFT_1_8, 0x00)
             );
             TO_SERVER.registerPacket(
                     PingPacket.class,
                     PingPacket::new,
-                    map( ProtocolConstants.MINECRAFT_1_8, 0x01 )
+                    map(ProtocolConstants.MINECRAFT_1_8, 0x01)
             );
         }
     },
     //2
-    LOGIN
-    {
+    LOGIN {
 
         {
             TO_CLIENT.registerPacket(
                     Kick.class,
                     Kick::new,
-                    map( ProtocolConstants.MINECRAFT_1_8, 0x00 )
+                    map(ProtocolConstants.MINECRAFT_1_8, 0x00)
             );
             TO_CLIENT.registerPacket(
                     EncryptionRequest.class,
                     EncryptionRequest::new,
-                    map( ProtocolConstants.MINECRAFT_1_8, 0x01 )
+                    map(ProtocolConstants.MINECRAFT_1_8, 0x01)
             );
             TO_CLIENT.registerPacket(
                     LoginSuccess.class,
                     LoginSuccess::new,
-                    map( ProtocolConstants.MINECRAFT_1_8, 0x02 )
+                    map(ProtocolConstants.MINECRAFT_1_8, 0x02)
             );
             TO_CLIENT.registerPacket(
                     SetCompression.class,
                     SetCompression::new,
-                    map( ProtocolConstants.MINECRAFT_1_8, 0x03 )
+                    map(ProtocolConstants.MINECRAFT_1_8, 0x03)
             );
             TO_CLIENT.registerPacket(
                     LoginPayloadRequest.class,
                     LoginPayloadRequest::new,
-                    map( ProtocolConstants.MINECRAFT_1_13, 0x04 )
+                    map(ProtocolConstants.MINECRAFT_1_13, 0x04)
             );
 
             TO_SERVER.registerPacket(
                     LoginRequest.class,
                     LoginRequest::new,
-                    map( ProtocolConstants.MINECRAFT_1_8, 0x00 )
+                    map(ProtocolConstants.MINECRAFT_1_8, 0x00)
             );
             TO_SERVER.registerPacket(
                     EncryptionResponse.class,
                     EncryptionResponse::new,
-                    map( ProtocolConstants.MINECRAFT_1_8, 0x01 )
+                    map(ProtocolConstants.MINECRAFT_1_8, 0x01)
             );
             TO_SERVER.registerPacket(
                     LoginPayloadResponse.class,
                     LoginPayloadResponse::new,
-                    map( ProtocolConstants.MINECRAFT_1_13, 0x02 )
+                    map(ProtocolConstants.MINECRAFT_1_13, 0x02)
             );
             TO_SERVER.registerPacket(
                     LoginAcknowledged.class,
                     LoginAcknowledged::new,
-                    map( ProtocolConstants.MINECRAFT_1_20_2, 0x03 )
+                    map(ProtocolConstants.MINECRAFT_1_20_2, 0x03)
             );
         }
     },
     // 3
-    CONFIGURATION
-    {
+    CONFIGURATION {
 
         {
             TO_CLIENT.registerPacket(
                     PluginMessage.class,
                     PluginMessage::new,
-                    map( ProtocolConstants.MINECRAFT_1_20_2, 0x00 )
+                    map(ProtocolConstants.MINECRAFT_1_20_2, 0x00)
             );
             TO_CLIENT.registerPacket(
                     Kick.class,
                     Kick::new,
-                    map( ProtocolConstants.MINECRAFT_1_20_2, 0x01 )
+                    map(ProtocolConstants.MINECRAFT_1_20_2, 0x01)
             );
             TO_CLIENT.registerPacket(
                     FinishConfiguration.class,
                     FinishConfiguration::new,
-                    map( ProtocolConstants.MINECRAFT_1_20_2, 0x02 )
+                    map(ProtocolConstants.MINECRAFT_1_20_2, 0x02)
             );
             TO_CLIENT.registerPacket(
                     KeepAlive.class,
                     KeepAlive::new,
-                    map( ProtocolConstants.MINECRAFT_1_20_2, 0x03 )
+                    map(ProtocolConstants.MINECRAFT_1_20_2, 0x03)
             );
 
             TO_SERVER.registerPacket(
                     ClientSettings.class,
                     ClientSettings::new,
-                    map( ProtocolConstants.MINECRAFT_1_20_2, 0x00 )
+                    map(ProtocolConstants.MINECRAFT_1_20_2, 0x00)
             );
             TO_SERVER.registerPacket(
                     PluginMessage.class,
                     PluginMessage::new,
-                    map( ProtocolConstants.MINECRAFT_1_20_2, 0x01 )
+                    map(ProtocolConstants.MINECRAFT_1_20_2, 0x01)
             );
             TO_SERVER.registerPacket(
                     FinishConfiguration.class,
                     FinishConfiguration::new,
-                    map( ProtocolConstants.MINECRAFT_1_20_2, 0x02 )
+                    map(ProtocolConstants.MINECRAFT_1_20_2, 0x02)
             );
             TO_SERVER.registerPacket(
                     KeepAlive.class,
                     KeepAlive::new,
-                    map( ProtocolConstants.MINECRAFT_1_20_2, 0x03 )
+                    map(ProtocolConstants.MINECRAFT_1_20_2, 0x03)
             );
         }
     };
     /*========================================================================*/
     public static final int MAX_PACKET_ID = 0xFF;
     /*========================================================================*/
-    public final DirectionData TO_SERVER = new DirectionData( this, ProtocolConstants.Direction.TO_SERVER );
-    public final DirectionData TO_CLIENT = new DirectionData( this, ProtocolConstants.Direction.TO_CLIENT );
+    public final DirectionData TO_SERVER = new DirectionData(this, ProtocolConstants.Direction.TO_SERVER);
+    public final DirectionData TO_CLIENT = new DirectionData(this, ProtocolConstants.Direction.TO_CLIENT);
 
-    public static void main(String[] args)
-    {
-        for ( int version : ProtocolConstants.SUPPORTED_VERSION_IDS )
-        {
-            dump( version );
+    public static void main(String[] args) {
+        for (int version : ProtocolConstants.SUPPORTED_VERSION_IDS) {
+            dump(version);
         }
     }
 
-    private static void dump(int version)
-    {
-        for ( Protocol protocol : Protocol.values() )
-        {
-            dump( version, protocol );
+    private static void dump(int version) {
+        for (Protocol protocol : Protocol.values()) {
+            dump(version, protocol);
         }
     }
 
-    private static void dump(int version, Protocol protocol)
-    {
-        dump( version, protocol.TO_CLIENT );
-        dump( version, protocol.TO_SERVER );
+    private static void dump(int version, Protocol protocol) {
+        dump(version, protocol.TO_CLIENT);
+        dump(version, protocol.TO_SERVER);
     }
 
-    private static void dump(int version, DirectionData data)
-    {
-        for ( int id = 0; id < MAX_PACKET_ID; id++ )
-        {
-            DefinedPacket packet = data.createPacket( id, version );
-            if ( packet != null )
-            {
-                System.out.println( version + " " + data.protocolPhase + " " + data.direction + " " + id + " " + packet.getClass().getSimpleName() );
+    private static void dump(int version, DirectionData data) {
+        for (int id = 0; id < MAX_PACKET_ID; id++) {
+            DefinedPacket packet = data.createPacket(id, version);
+            if (packet != null) {
+                System.out.println(version + " " + data.protocolPhase + " " + data.direction + " " + id + " " + packet.getClass().getSimpleName());
             }
         }
     }
 
     @Data
-    private static class ProtocolData
-    {
+    private static class ProtocolData {
 
         private final int protocolVersion;
-        private final TObjectIntMap<Class<? extends DefinedPacket>> packetMap = new TObjectIntHashMap<>( MAX_PACKET_ID );
+        private final TObjectIntMap<Class<? extends DefinedPacket>> packetMap = new TObjectIntHashMap<>(MAX_PACKET_ID);
         @SuppressWarnings("unchecked")
-        private final Supplier<? extends DefinedPacket>[] packetConstructors = new Supplier[ MAX_PACKET_ID ];
+        private final Supplier<? extends DefinedPacket>[] packetConstructors = new Supplier[MAX_PACKET_ID];
     }
 
     @Data
-    private static class ProtocolMapping
-    {
+    private static class ProtocolMapping {
 
         private final int protocolVersion;
         private final int packetID;
     }
 
     // Helper method
-    private static ProtocolMapping map(int protocol, int id)
-    {
-        return new ProtocolMapping( protocol, id );
+    private static ProtocolMapping map(int protocol, int id) {
+        return new ProtocolMapping(protocol, id);
     }
 
-    public static final class DirectionData
-    {
+    public static final class DirectionData {
 
         private final TIntObjectMap<ProtocolData> protocols = new TIntObjectHashMap<>();
         //
@@ -770,23 +759,19 @@ public enum Protocol
         @Getter
         private final ProtocolConstants.Direction direction;
 
-        public DirectionData(Protocol protocolPhase, ProtocolConstants.Direction direction)
-        {
+        public DirectionData(Protocol protocolPhase, ProtocolConstants.Direction direction) {
             this.protocolPhase = protocolPhase;
             this.direction = direction;
 
-            for ( int protocol : ProtocolConstants.SUPPORTED_VERSION_IDS )
-            {
-                protocols.put( protocol, new ProtocolData( protocol ) );
+            for (int protocol : ProtocolConstants.SUPPORTED_VERSION_IDS) {
+                protocols.put(protocol, new ProtocolData(protocol));
             }
         }
 
-        private ProtocolData getProtocolData(int version)
-        {
-            ProtocolData protocol = protocols.get( version );
-            if ( protocol == null && ( protocolPhase != Protocol.GAME ) )
-            {
-                protocol = Iterables.getFirst( protocols.valueCollection(), null );
+        private ProtocolData getProtocolData(int version) {
+            ProtocolData protocol = protocols.get(version);
+            if (protocol == null && (protocolPhase != Protocol.GAME)) {
+                protocol = Iterables.getFirst(protocols.valueCollection(), null);
             }
             return protocol;
         }
@@ -813,7 +798,7 @@ public enum Protocol
             }
 
             Supplier<? extends DefinedPacket> constructor = protocolData.packetConstructors[id];
-            return ( constructor == null ) ? null : constructor.get();
+            return (constructor == null) ? null : constructor.get();
         }
 
         private void registerPacket(Class<? extends DefinedPacket> packetClass, Supplier<? extends DefinedPacket> constructor, ProtocolMapping... mappings)
@@ -847,8 +832,8 @@ public enum Protocol
                     break;
                 }
 
-                ProtocolData data = protocols.get( protocol );
-                data.packetMap.put( packetClass, mapping.packetID );
+                ProtocolData data = protocols.get(protocol);
+                data.packetMap.put(packetClass, mapping.packetID);
                 data.packetConstructors[mapping.packetID] = constructor;
             }
         }
@@ -861,7 +846,7 @@ public enum Protocol
                 throw new BadPacketException( "Unsupported protocol version" );
             }
 
-            return protocolData.packetMap.containsKey( packet );
+            return protocolData.packetMap.containsKey(packet);
         }
 
         final int getId(Class<? extends DefinedPacket> packet, int version)
@@ -874,7 +859,7 @@ public enum Protocol
             }
             // Waterfall start
             final int packetId = protocolData.packetMap.get(packet);
-            Preconditions.checkArgument( packetId >= 0, "Cannot get ID for packet %s in phase %s with direction %s for protocol version %s", packet, protocolPhase, direction, version ); // Waterfall - add version
+            Preconditions.checkArgument(packetId >= 0, "Cannot get ID for packet %s in phase %s with direction %s for protocol version %s", packet, protocolPhase, direction, version); // Waterfall - add version
 
             return packetId;
             // Waterfall end
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/EntitySpawn.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/EntitySpawn.java
new file mode 100644
index 00000000..93b71fcf
--- /dev/null
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/EntitySpawn.java
@@ -0,0 +1,87 @@
+package net.md_5.bungee.protocol.packet;
+
+import io.netty.buffer.ByteBuf;
+import lombok.Data;
+import lombok.EqualsAndHashCode;
+import lombok.Getter;
+import lombok.Setter;
+import net.md_5.bungee.protocol.AbstractPacketHandler;
+import net.md_5.bungee.protocol.DefinedPacket;
+import net.md_5.bungee.protocol.ProtocolConstants;
+
+import java.util.UUID;
+
+@Getter
+@Data
+@EqualsAndHashCode(callSuper = false)
+public class EntitySpawn extends DefinedPacket {
+
+    int id;
+    @Setter
+    UUID uuid;
+    int type;
+
+    double X;
+    double Y;
+    double Z;
+
+    byte pitch;
+    byte yaw;
+    byte head_yaw;
+
+    int data;
+
+    short velX;
+    short velY;
+    short velZ;
+
+    public EntitySpawn() {
+
+    }
+
+    @Override
+    public void read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion) {
+        id = readVarInt(buf);
+        uuid = readUUID(buf);
+        type = readVarInt(buf);
+        X = buf.readDouble();
+        Y = buf.readDouble();
+        Z = buf.readDouble();
+        pitch = buf.readByte();
+        yaw = buf.readByte();
+        head_yaw = buf.readByte();
+
+        data = readVarInt(buf);
+
+        velX = buf.readShort();
+        velY = buf.readShort();
+        velZ = buf.readShort();
+    }
+
+    @Override
+    public void write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion) {
+        writeVarInt(id, buf);
+        writeUUID(uuid, buf);
+        writeVarInt(type, buf);
+
+        buf.writeDouble(X);
+        buf.writeDouble(Y);
+        buf.writeDouble(Z);
+
+        buf.writeByte(pitch);
+        buf.writeByte(yaw);
+        buf.writeByte(head_yaw);
+
+        writeVarInt(data, buf);
+
+        buf.writeShort(velX);
+        buf.writeShort(velY);
+        buf.writeShort(velZ);
+    }
+
+    @Override
+    public void handle(AbstractPacketHandler handler) throws Exception {
+        handler.handle(this);
+    }
+
+}
\ No newline at end of file
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/DownstreamBridge.java b/proxy/src/main/java/net/md_5/bungee/connection/DownstreamBridge.java
index d0496ab4..9dbe5aee 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/DownstreamBridge.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/DownstreamBridge.java
@@ -24,6 +24,7 @@ import java.util.Locale;
 import java.util.Map;
 import java.util.stream.Collectors;
 import lombok.RequiredArgsConstructor;
+import net.md_5.bungee.BungeeCord;
 import net.md_5.bungee.ServerConnection;
 import net.md_5.bungee.ServerConnection.KeepAliveData;
 import net.md_5.bungee.ServerConnector;
@@ -56,6 +57,7 @@ import net.md_5.bungee.protocol.Protocol;
 import net.md_5.bungee.protocol.ProtocolConstants;
 import net.md_5.bungee.protocol.packet.BossBar;
 import net.md_5.bungee.protocol.packet.Commands;
+import net.md_5.bungee.protocol.packet.EntitySpawn;
 import net.md_5.bungee.protocol.packet.KeepAlive;
 import net.md_5.bungee.protocol.packet.Kick;
 import net.md_5.bungee.protocol.packet.Login;
@@ -861,4 +863,15 @@ public class DownstreamBridge extends PacketHandler
     {
         return "[" + con.getAddress() + "|" + con.getName() + "] <-> DownstreamBridge <-> [" + server.getInfo().getName() + "]";
     }
+
+    @Override
+    public void handle(EntitySpawn entitySpawn) throws Exception
+    {
+        UserConnection player = BungeeCord.getInstance().getPlayerByOfflineUUID( entitySpawn.getUuid() );
+        if ( player != null ) {
+            entitySpawn.setUuid( player.getUniqueId() );
+        }
+        con.unsafe().sendPacket( entitySpawn );
+        throw CancelSendSignal.INSTANCE;
+    }
 }
-- 
2.39.2 (Apple Git-143)

